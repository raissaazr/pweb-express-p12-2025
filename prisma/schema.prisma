
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Ini mengambil URL dari file .env Anda
}

generator client {
  provider = "prisma-client-js"
}

// ------------------------------------------
// MODEL UNTUK FITUR AUTENTIKASI
// ------------------------------------------
model User {
  id           String        @id @default(uuid())
  username     String        @unique // Username harus unik
  password     String        // Password akan di-hash
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relasi: Satu User bisa punya banyak Transaksi
  transactions Transaction[] 
}

// ------------------------------------------
// MODEL UNTUK FITUR KATALOG (BUKU & GENRE)
// ------------------------------------------
model Genre {
  id        Int      @id @default(autoincrement())
  name      String   @unique // Nama genre harus unik
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relasi: Satu Genre bisa punya banyak Buku
  books     Book[]
}

model Book {
  id        String   @id @default(uuid())
  title     String   @unique // Judul buku harus unik 
  author    String
  price     Int
  stock     Int      // Stok buku 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relasi ke Genre
  genreId Int
  genre   Genre @relation(fields: [genreId], references: [id], onDelete: Restrict, onUpdate: Cascade) 
  // onDelete: Restrict -> Mencegah genre dihapus jika masih ada buku terkait 
  
  // Relasi ke Transaksi
  transactionItems TransactionItem[]
}

// ------------------------------------------
// MODEL UNTUK FITUR TRANSAKSI
// ------------------------------------------
model Transaction {
  id          String   @id @default(uuid())
  totalAmount Int
  createdAt   DateTime @default(now())
  
  // Relasi ke User
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  // Relasi: Satu Transaksi punya banyak Item/Detail
  items  TransactionItem[]
}

model TransactionItem {
  id            String @id @default(uuid())
  quantity      Int    // Jumlah buku ini yg dibeli
  pricePerItem  Int    // Harga buku PADA SAAT dibeli
  
  // Relasi ke Transaksi (induk)
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  // Relasi ke Buku
  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  // onDelete: Restrict -> Mencegah buku dihapus jika ada riwayat transaksi 
}